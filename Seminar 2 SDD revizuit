#include<stdio.h>
#include<malloc.h>
struct Calculator {
	char* serie;
	float pret;
	int nrPorturi;
};
struct Calculator initializare(const char* serie, float pret, int nrPorturi)
{
	//mai intai ne declaram un calculator pe care sa-l returnam
	struct Calculator c;
	c.serie = (char*)malloc(sizeof(char) * (strlen(serie) + 1));//trebuie sa prioritizam adunarea inintea inmultirii dintre sizeof char si strlen serie
	strcpy(c.serie, serie);
	c.nrPorturi = nrPorturi;
	c.pret = pret;
	return c;
}
void afisareCalculator(struct Calculator c)
{
	printf("Calculatorul cu seria %s costa %5.2f si are %d porturi\n", c.serie, c.pret, c.nrPorturi);
}
void afisareVectorCalculatoare(struct Calculator* vector, int nrCalculatoare)//primeste ca parametru pointer la structura noastra de vrem sa o afisam 
{
	//facem niste verificari => partea de validari
	if (nrCalculatoare > 0 && vector != NULL)
	{
		for (int i = 0; i < nrCalculatoare; i++)
		{
			afisareCalculator(vector[i]);
		}
	}
}
//o functie care sa copieze primele 3 elem din vector
//returneaza un pointer
struct Calculator* copiazaNCalculatoare(struct Calculator* calculatoare, int nrCalculatoare, int nrCalculatoareCopiate)
{
	struct Calculator* copiate = (struct Calculator*)malloc(sizeof(struct Calculator) * nrCalculatoareCopiate);
	for (int i = 0; i < nrCalculatoareCopiate; i++)
	{
		copiate[i] = calculatoare[i];//facem ceva ce se numeste shallow  copy ca sa nu ai eroare de dAngling poinbter
		copiate[i].serie = (char*)malloc(sizeof(char) * (1 + strlen(calculatoare[i].serie)));
		strcpy(copiate[i].serie, calculatoare[i].serie);
	}
	return copiate;
}
struct Calculator* copiazaCalculatoareCuMultePorturi(struct Calculator* calculatoare, int nrCalculatoare, int pragNrPorturi, int* NrCalculatoarePorturi)
{
	*NrCalculatoarePorturi = 0;//poate sa ti asigneze un pointer care are o alta val decat 0
	//iti trb pointer la param pt ca numarul ala se schimba
	for (int i = 0; i < nrCalculatoare; i++)
	{
		if (calculatoare[i].nrPorturi >= pragNrPorturi)
		{
			(*NrCalculatoarePorturi)++;

		}
	}
	struct Calculator* v = (struct Calculator*)malloc(sizeof(struct Calculator) * (*NrCalculatoarePorturi));
	int k = 0;
	for (int i = 0; i < nrCalculatoare; i++)
	{
		if (calculatoare[i].nrPorturi >= pragNrPorturi)
		{
			v[k++] = initializare(calculatoare[i].serie, calculatoare[i].pret, calculatoare[i].nrPorturi);//am facut deep copy
		}

	}
	return v;//de ce e aici return v
}
//returnam primul calculator care are un pret dat; daca sunt mai multe tot primul calculator sa fie returnat
struct Calculator** PretDat(struct Calculator* calculatoare, int nrCalculatoare, float valoareaPret, int* nrCalculatoarePret) {
	struct Calculator** potrivirecalculator = (struct Calculator*)malloc(sizeof(struct Calculator) * nrCalculatoare);
	if (potrivirecalculator == NULL) {
		*nrCalculatoarePret = 0;
		return NULL;
	}

	int count = 0;
	for (int i = 0; i < nrCalculatoare; i++) {
		if (calculatoare[i].pret == valoareaPret) {
			potrivirecalculator[count++] = &calculatoare[i];
		}
	}

	*nrCalculatoarePret = count;
	return potrivirecalculator;
}



//dezalocare
void dezalocare(struct Calculator** vector, int* dim) {
	for (int i = 0; i < (*dim); i++)
	{
		free((*vector)[i].serie);
	}
	free(*vector);
	*vector = NULL;
	*dim = NULL;
}


void main()
{
	int v[10];//alocat static deci pe stack  va ocupa 4*10 de octeti
	//daca nu stim exact cate elemente are atunci alocam dinamic
	int* v1;//pointer catre valoarea primului element, ocupa 4 oteti sau 8 octeti pe 64 de biti 
	int nrCalculatoare = 5;
	struct Calculator* calculatoare = (struct Calculator*)malloc(sizeof(struct Calculator) * nrCalculatoare);

	for (int i = 0; i < nrCalculatoare; i++)
	{
		calculatoare[i] = initializare("1234567890", i * 20 + 10, i + 1);
	}

	afisareVectorCalculatoare(calculatoare, nrCalculatoare);

	int nrCalculatoareCopiate = 3;
	struct Calculator* calculatoareCopiate = copiazaNCalculatoare(calculatoare, nrCalculatoare, nrCalculatoareCopiate);

	printf("\n\n\n");
	afisareVectorCalculatoare(calculatoareCopiate, nrCalculatoareCopiate);

	int nrCalculatoarePorturi = 0;
	struct CalculatoarePorturi* calculatoarePorturi = copiazaCalculatoareCuMultePorturi(calculatoare, nrCalculatoare, 3, &nrCalculatoarePorturi);

	printf("\n\n\n");

	afisareVectorCalculatoare(calculatoarePorturi, nrCalculatoarePorturi);


	printf("\n\n\n");

	afisareVectorCalculatoare(calculatoarePorturi, nrCalculatoarePorturi);
	printf("\n\n-");
	float pretDatlaCalculatoare = 50.00;
	int nrCalculatoarePret = 0;
	struct Calculator** calculatorulcupretulrespectiv = PretDat(calculatoare, nrCalculatoare, pretDatlaCalculatoare, &nrCalculatoarePret);
	if (calculatorulcupretulrespectiv != NULL) {
		printf("\nCalculatoare cu pretul %5.2f:\n", pretDatlaCalculatoare);
		for (int i = 0; i < nrCalculatoarePret; i++) {
			afisareCalculator(*calculatorulcupretulrespectiv[i]);
		}
		free(calculatorulcupretulrespectiv);
	}
	else {
		printf("\nNu s-au gasit calculatoare cu pretul %5.2f\n", pretDatlaCalculatoare);
	}



	dezalocare(&calculatoare, &nrCalculatoare);
}
