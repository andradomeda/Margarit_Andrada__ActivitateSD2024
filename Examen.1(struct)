#include <stdio.h>
#include <malloc.h>
//standard imput output library pt citiri de la tastatura etc
//biblioteca de gestionare a memoriei dinamice
struct Muzeu 
{
	//la struct in c nu poti sa ai functii
	char* nume;//sir de caractere 
	float pret;
	int nr_vizitatori;

};
struct Muzeu initializare(const char* nume, float pret, int nr_vizitatori)
{
	struct Muzeu muzeu;
	//pt locrea dinmica trebuie mi intai s aloc memorie dupa initilizez
	if(nume!=NULL){
	muzeu.nume = (char*)malloc(sizeof(char) * (strlen(nume) + 1));
	//de obicei functia malloc returneaza void* dar prin (char*) noi transformam pointerul generic returnat in pointer la char
	//in parntez iti trebuie mai intai tipul de date storat, pt a i putea face size ul si apoi cate elemente de tipul la exista
	//+1 pt ca strlen returneaza marimea sitului de carctere fara termenul nul de la sfarsit 
	//muzeu.nume este un char* deci va fi egal cu ceva de tip char* 
	strcpy(muzeu.nume, nume);
	}
	else
	{
		muzeu.nume = (char*)malloc(strlen("N/A") + 1);
		strcpy(muzeu.nume, "N/A");
	}
	muzeu.pret = pret;
	muzeu.nr_vizitatori = nr_vizitatori;
	return muzeu;
}
int calcul(struct Muzeu muzeu)
{
	return muzeu.nr_vizitatori / 2;
}
void afisare(const struct Muzeu muzeu)
{
	if(muzeu.nume!=NULL)
	{
	printf("Muzeul se numeste %s, si pretul de intrare este %.2f avand %d vizitatori", muzeu.nume, muzeu.pret, muzeu.nr_vizitatori);
	}
	else
	{
		printf("pretul de intrare este %.2f avand %d vizitatori", muzeu.pret, muzeu.nr_vizitatori);
	}
}
////Realizati o functie care modifica pentru un obiect primit ca parametru, un anumit camp.noua valoare
//este primita ca parametru.
void modif(struct Muzeu* muzeu, int numar)
{
	muzeu->nr_vizitatori = numar;
}
void dezalocare(struct Muzeu muzeu)
{
	if (muzeu.nume != NULL) {
		free(muzeu.nume);
		muzeu.nume = NULL;
	}
}
void main()
{
	struct Muzeu muzeu = initializare("Antipa", 12.46327, 123);
	afisare(muzeu);
	int calculul = calcul(muzeu);
	printf("\n%d\n", calculul);
	modif(&muzeu, 200);
	afisare(muzeu);
	dezalocare(muzeu);
}
