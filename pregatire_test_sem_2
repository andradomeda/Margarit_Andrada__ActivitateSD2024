#include<stdio.h>
#include<stdlib.h>
#include<string.h>
struct Florarie {
	int cod;
	char* nume;
	int nrTipuri;
	//float* pret;//cat costa o floare de un tip
};
struct Florarie initializare(int cod, const char* nume, int nrTipuri/*, const float* pret*/)
{
	struct Florarie floraria;
	floraria.cod = cod;
	floraria.nume = (char*)malloc((sizeof(char)) * (strlen(nume) + 1));
	strcpy_s(floraria.nume,strlen(nume)+1, nume);
	floraria.nrTipuri = nrTipuri;
	/*floraria.pret = (float*)malloc((sizeof(float)) * nrTipuri);
    for (int i = 0; i < floraria.nrTipuri; i++)
     {
       floraria.pret[i] = pret[i];
     }*/
    return floraria;
}
void afisare(struct Florarie floraria)
{
    printf("Numele florariei %s are codul %d are %d tipuri de flori ", floraria.nume, floraria.cod, floraria.nrTipuri);
    /*for (int i = 0; i < floraria.nrTipuri; i++)
    {
        printf(" %.2f", floraria.pret[i]);
    }*/
    printf("\n");
}
//functie care copiaza primele 3 florarii
//returneaza un pointer!!!!!!!!!!
struct Florarie* copiaza(struct Florarie* vectorFlorarii)
{
    struct Florarie* vectorNou;
    vectorNou = (struct Florarie*)malloc(4 * sizeof(struct Florarie));
    int k = 0;
    for (int i = 0; i < 3; i++)
    {
        vectorNou[k] = vectorFlorarii[i];
        k++;
    }
    return vectorNou;
}
//functie care copiaza florariile ce respecta un anumit criteriu
//creezi un nou vector deci iti trebuie un singur pointer 
struct Florarie* codImpar(struct Florarie* vectorFlorarii, int nrFlorarii, int* nrflorariibune)
{
    *nrflorariibune = 0;
    for (int i = 0; i < nrFlorarii; i++)
    {
        if (vectorFlorarii[i].nrTipuri != 0)
        {
            (*nrflorariibune)++;
        }
    }

    struct Florarie* florarieCodImpar = (struct Florarie*)malloc(sizeof(struct Florarie)*(*nrflorariibune));
    int k = 0;
    for (int i = 0; i < nrFlorarii; i++)
    {
        if (vectorFlorarii[i].nrTipuri%2 != 0)
        {
            florarieCodImpar[k] = initializare(vectorFlorarii[i].cod, vectorFlorarii[i].nume, vectorFlorarii[i].nrTipuri/*,vectorFlorarii[i].pret*/);
            k++;
        }
    }
    
    return florarieCodImpar;
}
//functie care returneza floraria care are un cod dat
//returneaza un pointer la pointer 
struct Florarie** florariacod(struct Florarie* vectorFlorarii, int nrFlorarii, int codCautat)
{
    for (int i = 0; i < nrFlorarii; i++)
    {
        if (vectorFlorarii[i].cod == codCautat)
            return vectorFlorarii[i];
    }
    return 0; 
}
void dezalocare(struct Florarie floraria)
{
    /*free(floraria.pret);*/
    free(floraria.nume);
}
int main() {
    
    /*float preturi[] = { 25.5, 30.75, 20.0, 15.25 };*/
    struct Florarie floraria = initializare(1001, "Floraria mea", 4/*, preturi*/);
    afisare(floraria);
   
    int nrFlorarii;
    printf_s("Introduceti nr de florarii:");
    scanf_s("%d", &nrFlorarii);
    printf("\nDeci, construiesc vector cu %d florarii", nrFlorarii);
    printf("\n-------------------------------\n");
    struct Florarie* vectorFlorarii = (struct Florarie*)malloc(sizeof(struct Florarie) * nrFlorarii);

    for (int i = 0; i < nrFlorarii; i++)
    {
        vectorFlorarii[i] = initializare(1001 + i, "Floraria ", 4+i/*, preturi*/);
    }
    for (int i = 0; i < nrFlorarii; i++)
    {
        afisare(vectorFlorarii[i]);
    }
   
    
    /*printf("\nVectorul copiat cu primii 3 termeni\n");
    struct Florarie* vectorNou = copiaza(vectorFlorarii);
    for (int i = 0; i < nrFlorarii; i++)
    {
        afisare(vectorNou[i]);
    }*/

    printf("\n doamne ajuta \n");
    int nrflorariibune = 0;
    struct Florarie* florcodImpar = codImpar(vectorFlorarii, nrFlorarii, &nrflorariibune);
    for (int i = 0; i < nrFlorarii; i++)
    {
        afisare(florcodImpar[i]);
    }

    for (int i = 0; i < nrFlorarii; i++)
    {
        dezalocare(vectorFlorarii[i]);
    }

    return 0;
}
/*----------erore la deep copy-----------------
//Creati in functia main un vector alocat dinamic cu cel putin 5 obiecte de tipul structurii voastre.

//Stabiliti voi conditia in functie de un atribut sau doua atribute.
//Realizati o functie care muta intr - un nou vector obiectele care indeplinesc o alta conditie fata de cerinta precedenta.

//Apelati toate aceste functii in main().
#include<stdio.h>
#include<stdlib.h>

struct Restaurant
{
	int cod;
	char* nume;
	float taxe;
};
struct Restaurant initializare(int cod, const char* nume, float taxe)
{
	struct Restaurant restaurant;
	restaurant.cod = cod;
	restaurant.nume = (char*)malloc(sizeof(char) * (strlen(nume)+1));
	strcpy(restaurant.nume, nume);
	restaurant.taxe = taxe;
	return restaurant;
}
//Realizati o functie care afiseaza un vector cu obiecte.
void afisareobiect(struct Restaurant restaurant)
{
	printf("\nRestaurantul cu numele %s are codul % d si plateste %.2f taxe lunar\n", restaurant.nume, restaurant.cod, restaurant.taxe);
}
void afisarevector(struct Restaurant* r, int nrRestaurante)
{
	if (nrRestaurante > 0 && r != NULL)
	{
		for (int i = 0; i < nrRestaurante; i++)
		{
			afisareobiect(r[i]);
		}
	}
}
//Realizati o functie care va creea un nou vector Ã®n care va copia dintr - un vector primit ca parametru primele 3 obiecte
struct Restaurant* copiere(struct Restaurant* vectRestaurante)
{
	struct Restaurant* vectCodImpar=(struct Restaurant*)malloc(sizeof(struct Restaurant)*3);
	
	for (int i = 0; i < 3; i++)
	{
		vectCodImpar[i].cod = vectRestaurante[i].cod;
		vectCodImpar[i].nume=(char*)malloc(sizeof(char)*(strlen(vectRestaurante[i].nume)+1));
		strcpy(vectCodImpar[i].nume, vectRestaurante[i].nume);
		vectCodImpar[i].taxe = vectCodImpar[i].taxe;
	}
	return vectCodImpar;
}
//deep copy
struct Restaurant* criteriu(struct Restaurant* restaurant,int nrRestaurante, int* dimensiune)
{
	*dimensiune = 0;
	for (int i = 0; i < nrRestaurante; i++)
	{
		if (restaurant[i].cod % 2 == 0)
		{
			(*dimensiune)++;
		}
	}
	struct Restaurant* vectNou = (struct Restaurant*)malloc(sizeof(struct Restaurant) * (*dimensiune));
	int k = 0;
	for (int i = 0; i < nrRestaurante; i++)
	{
		if (restaurant[i].cod % 2 == 0)
		{
			vectNou[k] = initializare(restaurant[i].cod, restaurant[i].nume, restaurant[i].taxe);
			k++;
		}
	}
	return vectNou;
}
void dezalocare(struct Restaurant** restaurant, int* dim)
{
	for (int i = 0; i < (*dim); i++)
	{
		free((*restaurant)[i].nume);
	}
	free(*restaurant);
	*restaurant = NULL;
	*dim = NULL;
	
}
void main()
{
	int nrRestaurante = 4;
	struct Restaurant* vectorRestaurante = (struct Restaurant*)malloc(sizeof(struct Restaurant) * nrRestaurante);
	for (int i = 0; i < nrRestaurante; i++)
	{
		vectorRestaurante[i] = initializare(1000 + i, "Restaurant", 100 * (i+0.25));
		
	}
	afisarevector(vectorRestaurante, nrRestaurante);
	
	printf("\n-----------shallow copy----------\n");
	struct Restaurant* vectCodImpar= copiere(vectorRestaurante);
	afisarevector(vectCodImpar, 3);

	printf("\n-------------deep copy------------\n");
	int dimensiune=0;
	struct Restaurant* vectNou = copiere(vectorRestaurante, 4, &dimensiune);
	afisarevector(vectNou, dimensiune);

	dezalocare(&vectorRestaurante, &nrRestaurante);
	
}
*/
